#!/usr/bin/env ruby

require 'yaml'
require 'ostruct'
require 'erb'

require 'logger'

LOG = Logger.new(STDOUT)

TEMPLATE = <<-EOF

upstream <%= name %> {
  server 127.0.0.1:<%= source_port %>;
}

server {
  listen   <%= alias_port %>;
  server_name <%= name %>;


  <% if basic_auth %>
  auth_basic "Restricted";
  auth_basic_user_file "<%= auth_file_path %>";
  <% end %>

  access_log /var/log/<%= name %>-access.log;
  error_log  /var/log/<%= name %>-error.log;

  location / {
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Host $http_host;
    proxy_redirect  off;
    try_files index.html @<%= name %>;
  }

  location @<%= name %> {
    proxy_pass http://<%= name %>;
  }

}


EOF

class CTX < OpenStruct
  def get_binding
    binding
  end
end

def to_ctx(basic_auth_file_path, als)
  ctx = {
    auth_file_path: basic_auth_file_path,
    name: als['name'].gsub(/\W/, '_'),
    alias_port: als['alias-port'],
    source_port: als['source-port'],
    basic_auth: als.fetch('basic-auth', true)
  }

  CTX.new(ctx)
end

def generate(ctx)
  LOG.info "Creating config part for #{ctx.name}"
  ERB.new(TEMPLATE).result(ctx.get_binding)
end

def save(out_file, buf)
  LOG.warn "Saving to #{out_file}"
  File.write(out_file, buf)
end

def create_config(basic_auth_file_path, config)
  buf = "# vim : set ft=nginx :\n\n\n"

  config['aliases'].each do |als|
    ctx = to_ctx(basic_auth_file_path, als)

    buf << generate(ctx)
  end

  buf
end

def process_config(config)
  basic_auth_file_path = File.expand_path(config['basic_auth_file'])

  out_file = File.expand_path(config['nginx_conf_file'])

  LOG.info "Got config with #{config['aliases'].size} aliases"

  buf = create_config(basic_auth_file_path, config)

  save(out_file, buf)
  LOG.info 'Done'
  LOG.info 'Dont forget to open following ports in your firewall:'
  config['aliases'].each do |als|
    LOG.info "\t- #{als['alias-port']}"
  end
end

def main(args)
  config = YAML.load_file args.first

  process_config config
end

main(ARGV)
